pragma solidity ^0.6.7;
//SPDX-License-Identifier: MIT

import "hardhat/console.sol";
//import "@openzeppelin/contracts/access/Ownable.sol"; //https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol
import "@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol";
import "@chainlink/contracts/src/v0.6/interfaces/KeeperCompatibleInterface.sol";

contract YourContract {

  uint public immutable interval;
  uint public lastTimeStamp;
  uint public counter;

  constructor() public {
    interval = 2 minutes;
    lastTimeStamp = block.timestamp;
    counter = 0;
  }

  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData) {
       upkeepNeeded = (block.timestamp - lastTimeStamp) > interval;

       // We don't use the checkData in this example
       // checkData was defined when the Upkeep was registered
       performData = checkData;
   }

   function performUpkeep(bytes calldata performData) external {
       lastTimeStamp = block.timestamp;
       counter = counter + 1;

       // We don't use the performData in this example
       // performData is generated by the Keeper's call to your `checkUpkeep` function
       performData;

   }

}
